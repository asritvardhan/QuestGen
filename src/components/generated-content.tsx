"use client";

import { useRef } from 'react';
import { FileDown, Lightbulb, ListChecks } from 'lucide-react';

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { type GeneratedData, type Question } from '@/types';

interface GeneratedContentProps {
  isLoading: boolean;
  data: GeneratedData | null;
}

const QuestionCard = ({ question }: { question: Question }) => (
  <div className="p-4 border rounded-lg mb-4 bg-background/50">
    <p className="font-semibold mb-2">{question.question}</p>
    {question.type === 'MCQ' && question.options && (
      <ul className="list-disc list-inside pl-4 mb-2">
        {question.options.map((opt, i) => (
          <li key={i} className={opt === question.correctAnswer ? 'font-bold' : ''}>
            {opt}
          </li>
        ))}
      </ul>
    )}
    <div className="flex flex-wrap gap-2 text-xs">
      <Badge variant="secondary">Bloom's: {question.bloomsTaxonomyLevel}</Badge>
      <Badge variant="secondary">Outcome: {question.learningOutcomes}</Badge>
    </div>
  </div>
);

const QuestionList = ({ questions, title }: { questions: Question[], title: string }) => (
  <AccordionItem value={title.toLowerCase().replace(' ', '-')}>
    <AccordionTrigger className='font-headline text-lg'>{title} ({questions.length})</AccordionTrigger>
    <AccordionContent>
      {questions.map((q, i) => (
        <QuestionCard key={i} question={q} />
      ))}
    </AccordionContent>
  </AccordionItem>
);

export function GeneratedContent({ isLoading, data }: GeneratedContentProps) {
  const contentRef = useRef<HTMLDivElement>(null);

  const handleDownload = async () => {
    const element = contentRef.current;
    if (!element) return;

    try {
      const html2pdf = (await import('html2pdf.js')).default;
      const opt = {
        margin: 0.5,
        filename: 'QuestGenPlus_Paper.pdf',
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2, useCORS: true },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
      };
      html2pdf().set(opt).from(element).save();
    } catch (error) {
      console.error("Failed to download PDF", error);
    }
  };

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="space-y-4">
          <Skeleton className="h-8 w-1/3" />
          <Skeleton className="h-6 w-2/3" />
          <div className="space-y-4 pt-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="p-4 border rounded-lg">
                <Skeleton className="h-5 w-full mb-4" />
                <Skeleton className="h-4 w-1/2" />
              </div>
            ))}
          </div>
        </div>
      );
    }

    if (!data) {
      return (
        <div className="text-center py-20">
          <div className="inline-block p-4 bg-primary/10 rounded-full">
            <Lightbulb className="w-12 h-12 text-primary" />
          </div>
          <h3 className="font-headline mt-4 text-xl">Ready to Generate</h3>
          <p className="text-muted-foreground mt-1">Your generated questions will appear here.</p>
        </div>
      );
    }

    const mcqs = data.questions.filter(q => q.type === 'MCQ');
    const shortAnswers = data.questions.filter(q => q.type === 'Short Answer');
    const longAnswers = data.questions.filter(q => q.type === 'Long Answer');

    return (
      <Card className="shadow-lg">
        <CardHeader className="flex flex-row justify-between items-center">
          <div>
            <CardTitle className="font-headline text-2xl">Generated Paper</CardTitle>
            <CardDescription>Review your questions and download as a PDF.</CardDescription>
          </div>
          <Button variant="outline" onClick={handleDownload}>
            <FileDown /> Download PDF
          </Button>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="questions">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="questions"><ListChecks /> Questions</TabsTrigger>
              <TabsTrigger value="answer-key">Answer Key</TabsTrigger>
            </TabsList>
            <TabsContent value="questions" className="pt-4" ref={contentRef}>
              <h1 className="font-headline text-2xl mb-2">Practice Question Paper</h1>
              <p className="text-sm text-muted-foreground mb-6">Generated by QuestGen+</p>
              <Accordion type="multiple" defaultValue={['mcqs', 'short-answer', 'long-answer']} className="w-full">
                {mcqs.length > 0 && <QuestionList questions={mcqs} title="Multiple Choice Questions" />}
                {shortAnswers.length > 0 && <QuestionList questions={shortAnswers} title="Short Answer" />}
                {longAnswers.length > 0 && <QuestionList questions={longAnswers} title="Long Answer" />}
              </Accordion>
            </TabsContent>
            <TabsContent value="answer-key" className="pt-4">
              <div className="p-4 border rounded-lg bg-background/50">
                <h3 className="font-headline text-xl mb-4">Answer Key</h3>
                <pre className="whitespace-pre-wrap font-body text-sm leading-relaxed">{data.answerKey}</pre>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="w-full">
      {renderContent()}
    </div>
  );
}
